//
//  Dispatcher.swift
//  SoProgressive
//
//  Created by Nathan Armstrong on 10/27/16.
//  Copyright Â© 2016 Instructure. All rights reserved.
//

import ReactiveCocoa
import Result

public class Dispatcher<Input, Output, Error: ErrorType> {
	private let executeClosure: Input -> SignalProducer<Output, Error>
	private let eventsObserver: Signal<Event<Output, Error>, NoError>.Observer

	/// A signal of all events generated from applications of the Dispatcher.
	///
	/// In other words, this will send every `Event` from every signal generated
	/// by each SignalProducer returned from apply().
	public let events: Signal<Event<Output, Error>, NoError>

	/// A signal of all values generated from applications of the Dispatcher.
	///
	/// In other words, this will send every value from every signal generated
	/// by each SignalProducer returned from apply().
	public let values: Signal<Output, NoError>

	/// A signal of all errors generated from applications of the Dispatcher.
	///
	/// In other words, this will send errors from every signal generated by
	/// each SignalProducer returned from apply().
	public let errors: Signal<Error, NoError>

	public init(execute: (Input) -> SignalProducer<Output, Error>) {
        executeClosure = execute
		(events, eventsObserver) = Signal<Event<Output, Error>, NoError>.pipe()

		values = events.map { $0.value }.ignoreNil()
		errors = events.map { $0.error }.ignoreNil()
    }

	/// Creates a SignalProducer that, when started, will dispatch the input
	/// then forward the results upon the produced Signal.
	///
	/// - parameters:
	///   - input: A value that will be passed to the closure creating the signal
	///            producer.
	@warn_unused_result(message="Did you forget to call `start` on the producer?")
	public func apply(input: Input) -> SignalProducer<Output, Error> {
		return SignalProducer { observer, disposable in
			self.executeClosure(input).startWithSignal { signal, signalDisposable in
				disposable.addDisposable(signalDisposable)

				signal.observe { event in
					observer.action(event)
					self.eventsObserver.sendNext(event)
				}
			}
		}
    }
}
