//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: files.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

public protocol Soseedy_SeedyFilesUploadFileCall: ClientCallUnary {}

fileprivate final class Soseedy_SeedyFilesUploadFileCallBase: ClientCallUnaryBase<Soseedy_UploadFileRequest, Soseedy_Attachment>, Soseedy_SeedyFilesUploadFileCall {
  override class var method: String { return "/soseedy.SeedyFiles/UploadFile" }
}


/// Instantiate Soseedy_SeedyFilesServiceClient, then call methods of this protocol to make API calls.
public protocol Soseedy_SeedyFilesService: ServiceClient {
  /// Synchronous. Unary.
  func uploadFile(_ request: Soseedy_UploadFileRequest) throws -> Soseedy_Attachment
  /// Asynchronous. Unary.
  func uploadFile(_ request: Soseedy_UploadFileRequest, completion: @escaping (Soseedy_Attachment?, CallResult) -> Void) throws -> Soseedy_SeedyFilesUploadFileCall

}

public final class Soseedy_SeedyFilesServiceClient: ServiceClientBase, Soseedy_SeedyFilesService {
  /// Synchronous. Unary.
  public func uploadFile(_ request: Soseedy_UploadFileRequest) throws -> Soseedy_Attachment {
    return try Soseedy_SeedyFilesUploadFileCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func uploadFile(_ request: Soseedy_UploadFileRequest, completion: @escaping (Soseedy_Attachment?, CallResult) -> Void) throws -> Soseedy_SeedyFilesUploadFileCall {
    return try Soseedy_SeedyFilesUploadFileCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
public protocol Soseedy_SeedyFilesProvider: ServiceProvider {
  func uploadFile(request: Soseedy_UploadFileRequest, session: Soseedy_SeedyFilesUploadFileSession) throws -> Soseedy_Attachment
}

extension Soseedy_SeedyFilesProvider {
  public var serviceName: String { return "soseedy.SeedyFiles" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  public func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/soseedy.SeedyFiles/UploadFile":
      return try Soseedy_SeedyFilesUploadFileSessionBase(
        handler: handler,
        providerBlock: { try self.uploadFile(request: $0, session: $1 as! Soseedy_SeedyFilesUploadFileSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

public protocol Soseedy_SeedyFilesUploadFileSession: ServerSessionUnary {}

fileprivate final class Soseedy_SeedyFilesUploadFileSessionBase: ServerSessionUnaryBase<Soseedy_UploadFileRequest, Soseedy_Attachment>, Soseedy_SeedyFilesUploadFileSession {}
