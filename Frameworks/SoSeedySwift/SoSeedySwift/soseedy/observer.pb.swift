//
// Copyright (C) 2018-present Instructure, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: observer.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Any users can add their own observee if they have the credentials
/// https://canvas.instructure.com/doc/api/all_resources.html#method.user_observees.create
public struct Soseedy_AddObserveeWithCredentialsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var loginID: String = String()

  public var password: String = String()

  public var observeeToken: String = String()

  public var observerToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_GetObserverAlertThresholdsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_AddObserverAlertThresholdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var alertType: String = String()

  public var userID: Int64 = 0

  public var observerID: Int64 = 0

  public var token: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_GetObserverAlertsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int64 = 0

  public var token: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response messages
public struct Soseedy_ObserverAlertThresholds {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var thresholds: [Soseedy_ObserverAlertThreshold] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_ObserverAlertThreshold {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var alertType: String = String()

  public var threshold: String = String()

  public var workflowState: String = String()

  public var userID: Int64 = 0

  public var observerID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_ObserverAlerts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var alerts: [Soseedy_ObserverAlert] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_ObserverAlert {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var observerAlertThresholdID: Int64 = 0

  public var contextType: String = String()

  public var contextID: Int64 = 0

  public var alertType: String = String()

  public var workflowState: String = String()

  public var title: String = String()

  public var userID: Int64 = 0

  public var observerID: Int64 = 0

  public var htmlURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soseedy"

extension Soseedy_AddObserveeWithCredentialsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddObserveeWithCredentialsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "loginId"),
    2: .same(proto: "password"),
    3: .same(proto: "observeeToken"),
    4: .same(proto: "observerToken"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.loginID)
      case 2: try decoder.decodeSingularStringField(value: &self.password)
      case 3: try decoder.decodeSingularStringField(value: &self.observeeToken)
      case 4: try decoder.decodeSingularStringField(value: &self.observerToken)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.loginID.isEmpty {
      try visitor.visitSingularStringField(value: self.loginID, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    if !self.observeeToken.isEmpty {
      try visitor.visitSingularStringField(value: self.observeeToken, fieldNumber: 3)
    }
    if !self.observerToken.isEmpty {
      try visitor.visitSingularStringField(value: self.observerToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_AddObserveeWithCredentialsRequest) -> Bool {
    if self.loginID != other.loginID {return false}
    if self.password != other.password {return false}
    if self.observeeToken != other.observeeToken {return false}
    if self.observerToken != other.observerToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_GetObserverAlertThresholdsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetObserverAlertThresholdsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_GetObserverAlertThresholdsRequest) -> Bool {
    if self.token != other.token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_AddObserverAlertThresholdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddObserverAlertThresholdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alertType"),
    2: .same(proto: "userId"),
    3: .same(proto: "observerId"),
    4: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.alertType)
      case 2: try decoder.decodeSingularInt64Field(value: &self.userID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.observerID)
      case 4: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.alertType.isEmpty {
      try visitor.visitSingularStringField(value: self.alertType, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.observerID != 0 {
      try visitor.visitSingularInt64Field(value: self.observerID, fieldNumber: 3)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_AddObserverAlertThresholdRequest) -> Bool {
    if self.alertType != other.alertType {return false}
    if self.userID != other.userID {return false}
    if self.observerID != other.observerID {return false}
    if self.token != other.token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_GetObserverAlertsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetObserverAlertsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_GetObserverAlertsRequest) -> Bool {
    if self.userID != other.userID {return false}
    if self.token != other.token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_ObserverAlertThresholds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObserverAlertThresholds"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "thresholds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.thresholds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.thresholds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.thresholds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_ObserverAlertThresholds) -> Bool {
    if self.thresholds != other.thresholds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_ObserverAlertThreshold: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObserverAlertThreshold"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alertType"),
    3: .same(proto: "threshold"),
    4: .same(proto: "workflowState"),
    5: .same(proto: "userId"),
    6: .same(proto: "observerId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.alertType)
      case 3: try decoder.decodeSingularStringField(value: &self.threshold)
      case 4: try decoder.decodeSingularStringField(value: &self.workflowState)
      case 5: try decoder.decodeSingularInt64Field(value: &self.userID)
      case 6: try decoder.decodeSingularInt64Field(value: &self.observerID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.alertType.isEmpty {
      try visitor.visitSingularStringField(value: self.alertType, fieldNumber: 2)
    }
    if !self.threshold.isEmpty {
      try visitor.visitSingularStringField(value: self.threshold, fieldNumber: 3)
    }
    if !self.workflowState.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowState, fieldNumber: 4)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 5)
    }
    if self.observerID != 0 {
      try visitor.visitSingularInt64Field(value: self.observerID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_ObserverAlertThreshold) -> Bool {
    if self.id != other.id {return false}
    if self.alertType != other.alertType {return false}
    if self.threshold != other.threshold {return false}
    if self.workflowState != other.workflowState {return false}
    if self.userID != other.userID {return false}
    if self.observerID != other.observerID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_ObserverAlerts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObserverAlerts"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alerts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.alerts)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.alerts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alerts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_ObserverAlerts) -> Bool {
    if self.alerts != other.alerts {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_ObserverAlert: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObserverAlert"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "observerAlertThresholdId"),
    3: .same(proto: "contextType"),
    4: .same(proto: "contextId"),
    5: .same(proto: "alertType"),
    6: .same(proto: "workflowState"),
    7: .same(proto: "title"),
    8: .same(proto: "userId"),
    9: .same(proto: "observerId"),
    10: .same(proto: "htmlUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.observerAlertThresholdID)
      case 3: try decoder.decodeSingularStringField(value: &self.contextType)
      case 4: try decoder.decodeSingularInt64Field(value: &self.contextID)
      case 5: try decoder.decodeSingularStringField(value: &self.alertType)
      case 6: try decoder.decodeSingularStringField(value: &self.workflowState)
      case 7: try decoder.decodeSingularStringField(value: &self.title)
      case 8: try decoder.decodeSingularInt64Field(value: &self.userID)
      case 9: try decoder.decodeSingularInt64Field(value: &self.observerID)
      case 10: try decoder.decodeSingularStringField(value: &self.htmlURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.observerAlertThresholdID != 0 {
      try visitor.visitSingularInt64Field(value: self.observerAlertThresholdID, fieldNumber: 2)
    }
    if !self.contextType.isEmpty {
      try visitor.visitSingularStringField(value: self.contextType, fieldNumber: 3)
    }
    if self.contextID != 0 {
      try visitor.visitSingularInt64Field(value: self.contextID, fieldNumber: 4)
    }
    if !self.alertType.isEmpty {
      try visitor.visitSingularStringField(value: self.alertType, fieldNumber: 5)
    }
    if !self.workflowState.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowState, fieldNumber: 6)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 7)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 8)
    }
    if self.observerID != 0 {
      try visitor.visitSingularInt64Field(value: self.observerID, fieldNumber: 9)
    }
    if !self.htmlURL.isEmpty {
      try visitor.visitSingularStringField(value: self.htmlURL, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_ObserverAlert) -> Bool {
    if self.id != other.id {return false}
    if self.observerAlertThresholdID != other.observerAlertThresholdID {return false}
    if self.contextType != other.contextType {return false}
    if self.contextID != other.contextID {return false}
    if self.alertType != other.alertType {return false}
    if self.workflowState != other.workflowState {return false}
    if self.title != other.title {return false}
    if self.userID != other.userID {return false}
    if self.observerID != other.observerID {return false}
    if self.htmlURL != other.htmlURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
