# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version '1.89.0'

default_platform :ios
require 'slather'

platform :ios do
  #####################################################
  # project variables
  #####################################################
  the_scheme = 'Parent'
  the_project = 'Parent.xcodeproj'
  the_workspace = 'Parent.xcworkspace'
  
  def bump_build_number
    increment_build_number(build_number: ENV['BITRISE_BUILD_NUMBER'] || "1984") # the best year.  All the other scripts are wrong
  end
  
  desc 'Install development certs and checkout carthage deps'
  lane :setup_dev do
    match(type: 'development')
    carthage(no_build: true, use_binaries: false, use_ssh: true)
  end
  
  #####################################################
  # commit - Builds every commit to Develop branch
  #####################################################
  desc 'Build for development and run unit tests'
  lane :commit do
    setup_dev
    bump_build_number
    gym
    
    # upload to hockey if we can
    if ENV['HOCKEY_API_TOKEN']
          hockey(
            api_token: ENV['HOCKEY_API_TOKEN'],
            ipa: "Canvas.ipa",
            notes: last_git_commit[:message]
          )
        end
  end

  desc 'Run app tests on a simulator. Run commit lane first'
  lane :test do
    # must use destination instead of device until https://github.com/fastlane/fastlane/issues/5638
    # is resolved.
    scan(scheme: the_scheme,
         destination: 'platform=iOS Simulator,name=iPhone 6',
         workspace: the_workspace,
         skip_build: true)
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    match(type: "appstore") # more information: https://codesigning.guide
    cert
    sigh
    if ENV['BUILD_NUMBER']
      increment_build_number(
        build_number: ENV['BUILD_NUMBER'].to_i
      )
    end
    
    gym(scheme: "Parent", use_legacy_build_api: true) # Build your app - more options available
    pilot
    
    create_ipa
  end

  desc "Deploy a new version to the App Store"
  lane :appstore do
    match(type: "appstore")
    # snapshot
    increment_build_number
    gym(scheme: "Parent", use_legacy_build_api: true) # Build your app - more options available
    deliver(force: true)
    # frameit
  end
  
  desc 'Generate code coverage report. Run commit lane first'
  lane :coverage do
    slather(proj: the_project,
            workspace: the_workspace,
            scheme: the_scheme,
            cobertura_xml: true)
  end

  #####################################################
  # This block is called, only if the executed lane failed
  #####################################################
  error do |lane, exception|
      if lane.to_s != 'feature'

        path = ENV['HOME'] + '/vitruvius-worst.m4a'
        if File.file?(path)
          sh 'afplay ' + path
        end

        ENV['SLACK_URL'] = 'https://hooks.slack.com/services/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'
        slack(
          channel: '#ios-gerrit',
          message: "THAT IDEA IS JUST THE WORST\n\n" + exception.message,
          success: false,
          payload: {
              'GERRIT_CHANGE_URL' => ENV['GERRIT_CHANGE_URL'].to_s,
              'BUILD_URL' => ENV['BUILD_URL'].to_s,
            },
          attachment_properties: {
              thumb_url: vitruvius_image
            }
        )
      end
  end
end

#####################################################
# Some extra methods for code clarity and my own sanity
#####################################################
def vitruvius_image 
  vitruvius_imgs = ["http://i.ytimg.com/vi/_WzjkMIJ_nw/maxresdefault.jpg", 
    "http://cache.lego.com/r/www/r/movie/-/media/franchises/the%20lego%20movie/explore/downloads/touts/vit-879x360.png?l.r2=-816021521", 
    "http://static.tvtropes.org/pmwiki/pub/images/vitruvius_2234.png"]
  return vitruvius_imgs.shuffle.sample
end