/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: soseedy.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

/// Type for errors thrown from generated client code.
internal enum Soseedy_SoSeedyClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// CreateAssignment (Unary)
internal class Soseedy_SoSeedyCreateAssignmentCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateAssignment")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateAssignmentRequest,
                       metadata: Metadata) throws -> Soseedy_Assignment {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Assignment?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateAssignmentRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Assignment?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateAssignmentCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Assignment(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// SubmitCourseAssignment (Unary)
internal class Soseedy_SoSeedySubmitCourseAssignmentCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/SubmitCourseAssignment")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_SubmitCourseAssignmentRequest,
                       metadata: Metadata) throws -> Soseedy_CourseAssignmentSubmission {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_CourseAssignmentSubmission?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_SubmitCourseAssignmentRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_CourseAssignmentSubmission?, CallResult)->())
    throws -> Soseedy_SoSeedySubmitCourseAssignmentCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_CourseAssignmentSubmission(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateConversation (Unary)
internal class Soseedy_SoSeedyCreateConversationCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateConversation")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateConversationRequest,
                       metadata: Metadata) throws -> Soseedy_Conversation {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Conversation?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateConversationRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Conversation?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateConversationCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Conversation(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateCourse (Unary)
internal class Soseedy_SoSeedyCreateCourseCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateCourse")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateCourseRequest,
                       metadata: Metadata) throws -> Soseedy_Course {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Course?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateCourseRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Course?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateCourseCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Course(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// AddFavoriteCourse (Unary)
internal class Soseedy_SoSeedyAddFavoriteCourseCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/AddFavoriteCourse")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_AddFavoriteCourseRequest,
                       metadata: Metadata) throws -> Soseedy_Favorite {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Favorite?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_AddFavoriteCourseRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Favorite?, CallResult)->())
    throws -> Soseedy_SoSeedyAddFavoriteCourseCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Favorite(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateAnnouncement (Unary)
internal class Soseedy_SoSeedyCreateAnnouncementCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateAnnouncement")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateAnnouncementRequest,
                       metadata: Metadata) throws -> Soseedy_Discussion {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Discussion?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateAnnouncementRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Discussion?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateAnnouncementCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Discussion(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateDiscussion (Unary)
internal class Soseedy_SoSeedyCreateDiscussionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateDiscussion")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateDiscussionRequest,
                       metadata: Metadata) throws -> Soseedy_Discussion {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Discussion?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateDiscussionRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Discussion?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateDiscussionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Discussion(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateEnrollmentTerm (Unary)
internal class Soseedy_SoSeedyCreateEnrollmentTermCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateEnrollmentTerm")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateEnrollmentTermRequest,
                       metadata: Metadata) throws -> Soseedy_EnrollmentTerm {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_EnrollmentTerm?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateEnrollmentTermRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_EnrollmentTerm?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateEnrollmentTermCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_EnrollmentTerm(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// EnrollUserInCourse (Unary)
internal class Soseedy_SoSeedyEnrollUserInCourseCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/EnrollUserInCourse")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_EnrollUserRequest,
                       metadata: Metadata) throws -> Soseedy_Enrollment {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Enrollment?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_EnrollUserRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Enrollment?, CallResult)->())
    throws -> Soseedy_SoSeedyEnrollUserInCourseCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Enrollment(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// EnrollUserInSection (Unary)
internal class Soseedy_SoSeedyEnrollUserInSectionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/EnrollUserInSection")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_EnrollUserInSectionRequest,
                       metadata: Metadata) throws -> Soseedy_Enrollment {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Enrollment?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_EnrollUserInSectionRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Enrollment?, CallResult)->())
    throws -> Soseedy_SoSeedyEnrollUserInSectionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Enrollment(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateGradingPeriodSet (Unary)
internal class Soseedy_SoSeedyCreateGradingPeriodSetCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateGradingPeriodSet")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateGradingPeriodSetRequest,
                       metadata: Metadata) throws -> Soseedy_GradingPeriodSet {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_GradingPeriodSet?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateGradingPeriodSetRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_GradingPeriodSet?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateGradingPeriodSetCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_GradingPeriodSet(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateGradingPeriod (Unary)
internal class Soseedy_SoSeedyCreateGradingPeriodCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateGradingPeriod")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateGradingPeriodRequest,
                       metadata: Metadata) throws -> Soseedy_GradingPeriod {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_GradingPeriod?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateGradingPeriodRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_GradingPeriod?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateGradingPeriodCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_GradingPeriod(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// GetHealthCheck (Unary)
internal class Soseedy_SoSeedyGetHealthCheckCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/GetHealthCheck")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_HealthCheckRequest,
                       metadata: Metadata) throws -> Soseedy_HealthCheck {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_HealthCheck?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_HealthCheckRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_HealthCheck?, CallResult)->())
    throws -> Soseedy_SoSeedyGetHealthCheckCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_HealthCheck(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateCanvasUser (Unary)
internal class Soseedy_SoSeedyCreateCanvasUserCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateCanvasUser")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateCanvasUserRequest,
                       metadata: Metadata) throws -> Soseedy_CanvasUser {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_CanvasUser?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateCanvasUserRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_CanvasUser?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateCanvasUserCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_CanvasUser(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateQuiz (Unary)
internal class Soseedy_SoSeedyCreateQuizCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateQuiz")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateQuizRequest,
                       metadata: Metadata) throws -> Soseedy_Quiz {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Quiz?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateQuizRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Quiz?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateQuizCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Quiz(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateQuizSubmission (Unary)
internal class Soseedy_SoSeedyCreateQuizSubmissionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateQuizSubmission")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateQuizSubmissionRequest,
                       metadata: Metadata) throws -> Soseedy_QuizSubmission {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_QuizSubmission?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateQuizSubmissionRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_QuizSubmission?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateQuizSubmissionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_QuizSubmission(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CompleteQuizSubmission (Unary)
internal class Soseedy_SoSeedyCompleteQuizSubmissionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CompleteQuizSubmission")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CompleteQuizSubmissionRequest,
                       metadata: Metadata) throws -> Soseedy_QuizSubmission {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_QuizSubmission?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CompleteQuizSubmissionRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_QuizSubmission?, CallResult)->())
    throws -> Soseedy_SoSeedyCompleteQuizSubmissionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_QuizSubmission(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateQuizQuestion (Unary)
internal class Soseedy_SoSeedyCreateQuizQuestionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateQuizQuestion")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateQuizQuestionRequest,
                       metadata: Metadata) throws -> Soseedy_CreateQuizQuestionResponse {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_CreateQuizQuestionResponse?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateQuizQuestionRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_CreateQuizQuestionResponse?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateQuizQuestionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_CreateQuizQuestionResponse(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// PublishQuiz (Unary)
internal class Soseedy_SoSeedyPublishQuizCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/PublishQuiz")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_PublishQuizRequest,
                       metadata: Metadata) throws -> Soseedy_Quiz {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Quiz?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_PublishQuizRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Quiz?, CallResult)->())
    throws -> Soseedy_SoSeedyPublishQuizCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Quiz(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CreateSection (Unary)
internal class Soseedy_SoSeedyCreateSectionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SoSeedy/CreateSection")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateSectionRequest,
                       metadata: Metadata) throws -> Soseedy_Section {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Section?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SoSeedyClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateSectionRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Section?, CallResult)->())
    throws -> Soseedy_SoSeedyCreateSectionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Section(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Call methods of this class to make API calls.
internal class Soseedy_SoSeedyService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func createassignment(_ request: Soseedy_CreateAssignmentRequest)
    throws
    -> Soseedy_Assignment {
      return try Soseedy_SoSeedyCreateAssignmentCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createassignment(_ request: Soseedy_CreateAssignmentRequest,
                  completion: @escaping (Soseedy_Assignment?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateAssignmentCall {
      return try Soseedy_SoSeedyCreateAssignmentCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func submitcourseassignment(_ request: Soseedy_SubmitCourseAssignmentRequest)
    throws
    -> Soseedy_CourseAssignmentSubmission {
      return try Soseedy_SoSeedySubmitCourseAssignmentCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func submitcourseassignment(_ request: Soseedy_SubmitCourseAssignmentRequest,
                  completion: @escaping (Soseedy_CourseAssignmentSubmission?, CallResult)->())
    throws
    -> Soseedy_SoSeedySubmitCourseAssignmentCall {
      return try Soseedy_SoSeedySubmitCourseAssignmentCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createconversation(_ request: Soseedy_CreateConversationRequest)
    throws
    -> Soseedy_Conversation {
      return try Soseedy_SoSeedyCreateConversationCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createconversation(_ request: Soseedy_CreateConversationRequest,
                  completion: @escaping (Soseedy_Conversation?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateConversationCall {
      return try Soseedy_SoSeedyCreateConversationCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createcourse(_ request: Soseedy_CreateCourseRequest)
    throws
    -> Soseedy_Course {
      return try Soseedy_SoSeedyCreateCourseCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createcourse(_ request: Soseedy_CreateCourseRequest,
                  completion: @escaping (Soseedy_Course?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateCourseCall {
      return try Soseedy_SoSeedyCreateCourseCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func addfavoritecourse(_ request: Soseedy_AddFavoriteCourseRequest)
    throws
    -> Soseedy_Favorite {
      return try Soseedy_SoSeedyAddFavoriteCourseCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func addfavoritecourse(_ request: Soseedy_AddFavoriteCourseRequest,
                  completion: @escaping (Soseedy_Favorite?, CallResult)->())
    throws
    -> Soseedy_SoSeedyAddFavoriteCourseCall {
      return try Soseedy_SoSeedyAddFavoriteCourseCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createannouncement(_ request: Soseedy_CreateAnnouncementRequest)
    throws
    -> Soseedy_Discussion {
      return try Soseedy_SoSeedyCreateAnnouncementCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createannouncement(_ request: Soseedy_CreateAnnouncementRequest,
                  completion: @escaping (Soseedy_Discussion?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateAnnouncementCall {
      return try Soseedy_SoSeedyCreateAnnouncementCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func creatediscussion(_ request: Soseedy_CreateDiscussionRequest)
    throws
    -> Soseedy_Discussion {
      return try Soseedy_SoSeedyCreateDiscussionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func creatediscussion(_ request: Soseedy_CreateDiscussionRequest,
                  completion: @escaping (Soseedy_Discussion?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateDiscussionCall {
      return try Soseedy_SoSeedyCreateDiscussionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createenrollmentterm(_ request: Soseedy_CreateEnrollmentTermRequest)
    throws
    -> Soseedy_EnrollmentTerm {
      return try Soseedy_SoSeedyCreateEnrollmentTermCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createenrollmentterm(_ request: Soseedy_CreateEnrollmentTermRequest,
                  completion: @escaping (Soseedy_EnrollmentTerm?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateEnrollmentTermCall {
      return try Soseedy_SoSeedyCreateEnrollmentTermCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func enrolluserincourse(_ request: Soseedy_EnrollUserRequest)
    throws
    -> Soseedy_Enrollment {
      return try Soseedy_SoSeedyEnrollUserInCourseCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func enrolluserincourse(_ request: Soseedy_EnrollUserRequest,
                  completion: @escaping (Soseedy_Enrollment?, CallResult)->())
    throws
    -> Soseedy_SoSeedyEnrollUserInCourseCall {
      return try Soseedy_SoSeedyEnrollUserInCourseCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func enrolluserinsection(_ request: Soseedy_EnrollUserInSectionRequest)
    throws
    -> Soseedy_Enrollment {
      return try Soseedy_SoSeedyEnrollUserInSectionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func enrolluserinsection(_ request: Soseedy_EnrollUserInSectionRequest,
                  completion: @escaping (Soseedy_Enrollment?, CallResult)->())
    throws
    -> Soseedy_SoSeedyEnrollUserInSectionCall {
      return try Soseedy_SoSeedyEnrollUserInSectionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func creategradingperiodset(_ request: Soseedy_CreateGradingPeriodSetRequest)
    throws
    -> Soseedy_GradingPeriodSet {
      return try Soseedy_SoSeedyCreateGradingPeriodSetCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func creategradingperiodset(_ request: Soseedy_CreateGradingPeriodSetRequest,
                  completion: @escaping (Soseedy_GradingPeriodSet?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateGradingPeriodSetCall {
      return try Soseedy_SoSeedyCreateGradingPeriodSetCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func creategradingperiod(_ request: Soseedy_CreateGradingPeriodRequest)
    throws
    -> Soseedy_GradingPeriod {
      return try Soseedy_SoSeedyCreateGradingPeriodCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func creategradingperiod(_ request: Soseedy_CreateGradingPeriodRequest,
                  completion: @escaping (Soseedy_GradingPeriod?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateGradingPeriodCall {
      return try Soseedy_SoSeedyCreateGradingPeriodCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func gethealthcheck(_ request: Soseedy_HealthCheckRequest)
    throws
    -> Soseedy_HealthCheck {
      return try Soseedy_SoSeedyGetHealthCheckCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func gethealthcheck(_ request: Soseedy_HealthCheckRequest,
                  completion: @escaping (Soseedy_HealthCheck?, CallResult)->())
    throws
    -> Soseedy_SoSeedyGetHealthCheckCall {
      return try Soseedy_SoSeedyGetHealthCheckCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createcanvasuser(_ request: Soseedy_CreateCanvasUserRequest)
    throws
    -> Soseedy_CanvasUser {
      return try Soseedy_SoSeedyCreateCanvasUserCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createcanvasuser(_ request: Soseedy_CreateCanvasUserRequest,
                  completion: @escaping (Soseedy_CanvasUser?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateCanvasUserCall {
      return try Soseedy_SoSeedyCreateCanvasUserCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createquiz(_ request: Soseedy_CreateQuizRequest)
    throws
    -> Soseedy_Quiz {
      return try Soseedy_SoSeedyCreateQuizCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createquiz(_ request: Soseedy_CreateQuizRequest,
                  completion: @escaping (Soseedy_Quiz?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateQuizCall {
      return try Soseedy_SoSeedyCreateQuizCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createquizsubmission(_ request: Soseedy_CreateQuizSubmissionRequest)
    throws
    -> Soseedy_QuizSubmission {
      return try Soseedy_SoSeedyCreateQuizSubmissionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createquizsubmission(_ request: Soseedy_CreateQuizSubmissionRequest,
                  completion: @escaping (Soseedy_QuizSubmission?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateQuizSubmissionCall {
      return try Soseedy_SoSeedyCreateQuizSubmissionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func completequizsubmission(_ request: Soseedy_CompleteQuizSubmissionRequest)
    throws
    -> Soseedy_QuizSubmission {
      return try Soseedy_SoSeedyCompleteQuizSubmissionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func completequizsubmission(_ request: Soseedy_CompleteQuizSubmissionRequest,
                  completion: @escaping (Soseedy_QuizSubmission?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCompleteQuizSubmissionCall {
      return try Soseedy_SoSeedyCompleteQuizSubmissionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createquizquestion(_ request: Soseedy_CreateQuizQuestionRequest)
    throws
    -> Soseedy_CreateQuizQuestionResponse {
      return try Soseedy_SoSeedyCreateQuizQuestionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createquizquestion(_ request: Soseedy_CreateQuizQuestionRequest,
                  completion: @escaping (Soseedy_CreateQuizQuestionResponse?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateQuizQuestionCall {
      return try Soseedy_SoSeedyCreateQuizQuestionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func publishquiz(_ request: Soseedy_PublishQuizRequest)
    throws
    -> Soseedy_Quiz {
      return try Soseedy_SoSeedyPublishQuizCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func publishquiz(_ request: Soseedy_PublishQuizRequest,
                  completion: @escaping (Soseedy_Quiz?, CallResult)->())
    throws
    -> Soseedy_SoSeedyPublishQuizCall {
      return try Soseedy_SoSeedyPublishQuizCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func createsection(_ request: Soseedy_CreateSectionRequest)
    throws
    -> Soseedy_Section {
      return try Soseedy_SoSeedyCreateSectionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createsection(_ request: Soseedy_CreateSectionRequest,
                  completion: @escaping (Soseedy_Section?, CallResult)->())
    throws
    -> Soseedy_SoSeedyCreateSectionCall {
      return try Soseedy_SoSeedyCreateSectionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}
