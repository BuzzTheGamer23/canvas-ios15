// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quizzes.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Soseedy_CreateQuizRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateQuizRequest"

  var courseID: Int64 = 0

  var withDescription: Bool = false

  var lockAt: String = String()

  var unlockAt: String = String()

  var dueAt: String = String()

  var published: Bool = false

  var token: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularBoolField(value: &self.withDescription)
      case 3: try decoder.decodeSingularStringField(value: &self.lockAt)
      case 4: try decoder.decodeSingularStringField(value: &self.unlockAt)
      case 5: try decoder.decodeSingularStringField(value: &self.dueAt)
      case 6: try decoder.decodeSingularBoolField(value: &self.published)
      case 7: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.withDescription != false {
      try visitor.visitSingularBoolField(value: self.withDescription, fieldNumber: 2)
    }
    if !self.lockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.lockAt, fieldNumber: 3)
    }
    if !self.unlockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.unlockAt, fieldNumber: 4)
    }
    if !self.dueAt.isEmpty {
      try visitor.visitSingularStringField(value: self.dueAt, fieldNumber: 5)
    }
    if self.published != false {
      try visitor.visitSingularBoolField(value: self.published, fieldNumber: 6)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_CreateQuizSubmissionRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateQuizSubmissionRequest"

  var courseID: Int64 = 0

  var quizID: Int64 = 0

  var studentToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.quizID)
      case 3: try decoder.decodeSingularStringField(value: &self.studentToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.quizID != 0 {
      try visitor.visitSingularInt64Field(value: self.quizID, fieldNumber: 2)
    }
    if !self.studentToken.isEmpty {
      try visitor.visitSingularStringField(value: self.studentToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_CompleteQuizSubmissionRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CompleteQuizSubmissionRequest"

  var courseID: Int64 = 0

  var quizID: Int64 = 0

  var submissionID: Int64 = 0

  var attempt: Int64 = 0

  var validationToken: String = String()

  var studentToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.quizID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.submissionID)
      case 4: try decoder.decodeSingularInt64Field(value: &self.attempt)
      case 5: try decoder.decodeSingularStringField(value: &self.validationToken)
      case 6: try decoder.decodeSingularStringField(value: &self.studentToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.quizID != 0 {
      try visitor.visitSingularInt64Field(value: self.quizID, fieldNumber: 2)
    }
    if self.submissionID != 0 {
      try visitor.visitSingularInt64Field(value: self.submissionID, fieldNumber: 3)
    }
    if self.attempt != 0 {
      try visitor.visitSingularInt64Field(value: self.attempt, fieldNumber: 4)
    }
    if !self.validationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.validationToken, fieldNumber: 5)
    }
    if !self.studentToken.isEmpty {
      try visitor.visitSingularStringField(value: self.studentToken, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_CreateQuizQuestionRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateQuizQuestionRequest"

  var courseID: Int64 = 0

  var quizID: Int64 = 0

  var teacherToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.quizID)
      case 3: try decoder.decodeSingularStringField(value: &self.teacherToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.quizID != 0 {
      try visitor.visitSingularInt64Field(value: self.quizID, fieldNumber: 2)
    }
    if !self.teacherToken.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_PublishQuizRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PublishQuizRequest"

  var courseID: Int64 = 0

  var quizID: Int64 = 0

  var teacherToken: String = String()

  var published: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.quizID)
      case 3: try decoder.decodeSingularStringField(value: &self.teacherToken)
      case 4: try decoder.decodeSingularBoolField(value: &self.published)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.quizID != 0 {
      try visitor.visitSingularInt64Field(value: self.quizID, fieldNumber: 2)
    }
    if !self.teacherToken.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherToken, fieldNumber: 3)
    }
    if self.published != false {
      try visitor.visitSingularBoolField(value: self.published, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_Quiz: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Quiz"

  var id: Int64 = 0

  var title: String = String()

  var published: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularBoolField(value: &self.published)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.published != false {
      try visitor.visitSingularBoolField(value: self.published, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_QuizSubmission: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".QuizSubmission"

  var id: Int64 = 0

  var attempt: Int64 = 0

  var validationToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.attempt)
      case 3: try decoder.decodeSingularStringField(value: &self.validationToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.attempt != 0 {
      try visitor.visitSingularInt64Field(value: self.attempt, fieldNumber: 2)
    }
    if !self.validationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.validationToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_CreateQuizQuestionResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateQuizQuestionResponse"

  var id: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soseedy"

extension Soseedy_CreateQuizRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "withDescription"),
    3: .same(proto: "lockAt"),
    4: .same(proto: "unlockAt"),
    5: .same(proto: "dueAt"),
    6: .same(proto: "published"),
    7: .same(proto: "token"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CreateQuizRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.withDescription != other.withDescription {return false}
    if self.lockAt != other.lockAt {return false}
    if self.unlockAt != other.unlockAt {return false}
    if self.dueAt != other.dueAt {return false}
    if self.published != other.published {return false}
    if self.token != other.token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CreateQuizSubmissionRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "quizId"),
    3: .same(proto: "studentToken"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CreateQuizSubmissionRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.quizID != other.quizID {return false}
    if self.studentToken != other.studentToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CompleteQuizSubmissionRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "quizId"),
    3: .same(proto: "submissionId"),
    4: .same(proto: "attempt"),
    5: .same(proto: "validationToken"),
    6: .same(proto: "studentToken"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CompleteQuizSubmissionRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.quizID != other.quizID {return false}
    if self.submissionID != other.submissionID {return false}
    if self.attempt != other.attempt {return false}
    if self.validationToken != other.validationToken {return false}
    if self.studentToken != other.studentToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CreateQuizQuestionRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "quizId"),
    3: .same(proto: "teacherToken"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CreateQuizQuestionRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.quizID != other.quizID {return false}
    if self.teacherToken != other.teacherToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_PublishQuizRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "quizId"),
    3: .same(proto: "teacherToken"),
    4: .same(proto: "published"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_PublishQuizRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.quizID != other.quizID {return false}
    if self.teacherToken != other.teacherToken {return false}
    if self.published != other.published {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_Quiz: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "published"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_Quiz) -> Bool {
    if self.id != other.id {return false}
    if self.title != other.title {return false}
    if self.published != other.published {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_QuizSubmission: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "attempt"),
    3: .same(proto: "validationToken"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_QuizSubmission) -> Bool {
    if self.id != other.id {return false}
    if self.attempt != other.attempt {return false}
    if self.validationToken != other.validationToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CreateQuizQuestionResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CreateQuizQuestionResponse) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
