/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: enrollments.proto
 *
 */

/*
 * Copyright 2018, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

/// Type for errors thrown from generated client code.
internal enum Soseedy_SeedyEnrollmentsClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// CreateEnrollmentTerm (Unary)
internal class Soseedy_SeedyEnrollmentsCreateEnrollmentTermCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SeedyEnrollments/CreateEnrollmentTerm")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_CreateEnrollmentTermRequest,
                       metadata: Metadata) throws -> Soseedy_EnrollmentTerm {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_EnrollmentTerm?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SeedyEnrollmentsClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_CreateEnrollmentTermRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_EnrollmentTerm?, CallResult)->())
    throws -> Soseedy_SeedyEnrollmentsCreateEnrollmentTermCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_EnrollmentTerm(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// EnrollUserInCourse (Unary)
internal class Soseedy_SeedyEnrollmentsEnrollUserInCourseCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SeedyEnrollments/EnrollUserInCourse")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_EnrollUserRequest,
                       metadata: Metadata) throws -> Soseedy_Enrollment {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Enrollment?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SeedyEnrollmentsClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_EnrollUserRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Enrollment?, CallResult)->())
    throws -> Soseedy_SeedyEnrollmentsEnrollUserInCourseCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Enrollment(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// EnrollUserInSection (Unary)
internal class Soseedy_SeedyEnrollmentsEnrollUserInSectionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/soseedy.SeedyEnrollments/EnrollUserInSection")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Soseedy_EnrollUserInSectionRequest,
                       metadata: Metadata) throws -> Soseedy_Enrollment {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Soseedy_Enrollment?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Soseedy_SeedyEnrollmentsClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Soseedy_EnrollUserInSectionRequest,
                         metadata: Metadata,
                         completion: @escaping (Soseedy_Enrollment?, CallResult)->())
    throws -> Soseedy_SeedyEnrollmentsEnrollUserInSectionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Soseedy_Enrollment(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Call methods of this class to make API calls.
internal class Soseedy_SeedyEnrollmentsService {
  public var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client.
  internal init(address: String, secure: Bool = true) {
    gRPC.initialize()
    channel = Channel(address:address, secure:secure)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections with a custom certificate and (optional) hostname.
  internal init(address: String, certificates: String, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func createenrollmentterm(_ request: Soseedy_CreateEnrollmentTermRequest)
    throws
    -> Soseedy_EnrollmentTerm {
      return try Soseedy_SeedyEnrollmentsCreateEnrollmentTermCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func createenrollmentterm(_ request: Soseedy_CreateEnrollmentTermRequest,
                  completion: @escaping (Soseedy_EnrollmentTerm?, CallResult)->())
    throws
    -> Soseedy_SeedyEnrollmentsCreateEnrollmentTermCall {
      return try Soseedy_SeedyEnrollmentsCreateEnrollmentTermCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func enrolluserincourse(_ request: Soseedy_EnrollUserRequest)
    throws
    -> Soseedy_Enrollment {
      return try Soseedy_SeedyEnrollmentsEnrollUserInCourseCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func enrolluserincourse(_ request: Soseedy_EnrollUserRequest,
                  completion: @escaping (Soseedy_Enrollment?, CallResult)->())
    throws
    -> Soseedy_SeedyEnrollmentsEnrollUserInCourseCall {
      return try Soseedy_SeedyEnrollmentsEnrollUserInCourseCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func enrolluserinsection(_ request: Soseedy_EnrollUserInSectionRequest)
    throws
    -> Soseedy_Enrollment {
      return try Soseedy_SeedyEnrollmentsEnrollUserInSectionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func enrolluserinsection(_ request: Soseedy_EnrollUserInSectionRequest,
                  completion: @escaping (Soseedy_Enrollment?, CallResult)->())
    throws
    -> Soseedy_SeedyEnrollmentsEnrollUserInSectionCall {
      return try Soseedy_SeedyEnrollmentsEnrollUserInSectionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}


/// Type for errors thrown from generated server code.
internal enum Soseedy_SeedyEnrollmentsServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Soseedy_SeedyEnrollmentsProvider {
  func createenrollmentterm(request : Soseedy_CreateEnrollmentTermRequest, session : Soseedy_SeedyEnrollmentsCreateEnrollmentTermSession) throws -> Soseedy_EnrollmentTerm
  func enrolluserincourse(request : Soseedy_EnrollUserRequest, session : Soseedy_SeedyEnrollmentsEnrollUserInCourseSession) throws -> Soseedy_Enrollment
  func enrolluserinsection(request : Soseedy_EnrollUserInSectionRequest, session : Soseedy_SeedyEnrollmentsEnrollUserInSectionSession) throws -> Soseedy_Enrollment
}

/// Common properties available in each service session.
internal class Soseedy_SeedyEnrollmentsSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// CreateEnrollmentTerm (Unary)
internal class Soseedy_SeedyEnrollmentsCreateEnrollmentTermSession : Soseedy_SeedyEnrollmentsSession {
  private var provider : Soseedy_SeedyEnrollmentsProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Soseedy_SeedyEnrollmentsProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Soseedy_CreateEnrollmentTermRequest(serializedData:requestData)
        let replyMessage = try self.provider.createenrollmentterm(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// EnrollUserInCourse (Unary)
internal class Soseedy_SeedyEnrollmentsEnrollUserInCourseSession : Soseedy_SeedyEnrollmentsSession {
  private var provider : Soseedy_SeedyEnrollmentsProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Soseedy_SeedyEnrollmentsProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Soseedy_EnrollUserRequest(serializedData:requestData)
        let replyMessage = try self.provider.enrolluserincourse(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// EnrollUserInSection (Unary)
internal class Soseedy_SeedyEnrollmentsEnrollUserInSectionSession : Soseedy_SeedyEnrollmentsSession {
  private var provider : Soseedy_SeedyEnrollmentsProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Soseedy_SeedyEnrollmentsProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Soseedy_EnrollUserInSectionRequest(serializedData:requestData)
        let replyMessage = try self.provider.enrolluserinsection(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Soseedy_SeedyEnrollmentsServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Soseedy_SeedyEnrollmentsProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Soseedy_SeedyEnrollmentsProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Soseedy_SeedyEnrollmentsProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      fatalError() // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/soseedy.SeedyEnrollments/CreateEnrollmentTerm":
          try Soseedy_SeedyEnrollmentsCreateEnrollmentTermSession(handler:handler, provider:provider).run(queue:queue)
        case "/soseedy.SeedyEnrollments/EnrollUserInCourse":
          try Soseedy_SeedyEnrollmentsEnrollUserInCourseSession(handler:handler, provider:provider).run(queue:queue)
        case "/soseedy.SeedyEnrollments/EnrollUserInSection":
          try Soseedy_SeedyEnrollmentsEnrollUserInSectionSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

