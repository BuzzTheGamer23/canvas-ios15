// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: groups.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Soseedy_CreateCourseGroupCategoryRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateCourseGroupCategoryRequest"

  var courseID: Int64 = 0

  var teacherToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularStringField(value: &self.teacherToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if !self.teacherToken.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_CreateGroupRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateGroupRequest"

  var groupCategoryID: Int64 = 0

  var teacherToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.groupCategoryID)
      case 2: try decoder.decodeSingularStringField(value: &self.teacherToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupCategoryID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupCategoryID, fieldNumber: 1)
    }
    if !self.teacherToken.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_CreateGroupMembershipRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateGroupMembershipRequest"

  var groupID: Int64 = 0

  var userID: Int64 = 0

  var teacherToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.userID)
      case 3: try decoder.decodeSingularStringField(value: &self.teacherToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if !self.teacherToken.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_GroupCategory: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GroupCategory"

  var id: Int64 = 0

  var name: String = String()

  var contextType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.contextType)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.contextType.isEmpty {
      try visitor.visitSingularStringField(value: self.contextType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_Group: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Group"

  var id: Int64 = 0

  var name: String = String()

  var description_p: String = String()

  var contextType: String = String()

  var courseID: Int64 = 0

  var groupCategoryID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.contextType)
      case 5: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 6: try decoder.decodeSingularInt64Field(value: &self.groupCategoryID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.contextType.isEmpty {
      try visitor.visitSingularStringField(value: self.contextType, fieldNumber: 4)
    }
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 5)
    }
    if self.groupCategoryID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupCategoryID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_GroupMembership: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GroupMembership"

  var id: Int64 = 0

  var groupID: Int64 = 0

  var userID: Int64 = 0

  var workflowState: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.groupID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.userID)
      case 4: try decoder.decodeSingularStringField(value: &self.workflowState)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if !self.workflowState.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowState, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soseedy"

extension Soseedy_CreateCourseGroupCategoryRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "teacherToken"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CreateCourseGroupCategoryRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.teacherToken != other.teacherToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CreateGroupRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupCategoryId"),
    2: .same(proto: "teacherToken"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CreateGroupRequest) -> Bool {
    if self.groupCategoryID != other.groupCategoryID {return false}
    if self.teacherToken != other.teacherToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CreateGroupMembershipRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupId"),
    2: .same(proto: "userId"),
    3: .same(proto: "teacherToken"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CreateGroupMembershipRequest) -> Bool {
    if self.groupID != other.groupID {return false}
    if self.userID != other.userID {return false}
    if self.teacherToken != other.teacherToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_GroupCategory: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "contextType"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_GroupCategory) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.contextType != other.contextType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_Group: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "contextType"),
    5: .same(proto: "courseId"),
    6: .same(proto: "groupCategoryId"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_Group) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.description_p != other.description_p {return false}
    if self.contextType != other.contextType {return false}
    if self.courseID != other.courseID {return false}
    if self.groupCategoryID != other.groupCategoryID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_GroupMembership: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "groupId"),
    3: .same(proto: "userId"),
    4: .same(proto: "workflowState"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_GroupMembership) -> Bool {
    if self.id != other.id {return false}
    if self.groupID != other.groupID {return false}
    if self.userID != other.userID {return false}
    if self.workflowState != other.workflowState {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
