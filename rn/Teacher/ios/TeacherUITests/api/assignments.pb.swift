// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/assignments.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Soseedy_CreateAssignmentRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateAssignmentRequest"

  var courseID: Int64 = 0

  var withDescription: Bool = false

  var lockAt: String = String()

  var unlockAt: String = String()

  var dueAt: String = String()

  var submissionTypes: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularBoolField(value: &self.withDescription)
      case 3: try decoder.decodeSingularStringField(value: &self.lockAt)
      case 4: try decoder.decodeSingularStringField(value: &self.unlockAt)
      case 5: try decoder.decodeSingularStringField(value: &self.dueAt)
      case 6: try decoder.decodeRepeatedStringField(value: &self.submissionTypes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.withDescription != false {
      try visitor.visitSingularBoolField(value: self.withDescription, fieldNumber: 2)
    }
    if !self.lockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.lockAt, fieldNumber: 3)
    }
    if !self.unlockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.unlockAt, fieldNumber: 4)
    }
    if !self.dueAt.isEmpty {
      try visitor.visitSingularStringField(value: self.dueAt, fieldNumber: 5)
    }
    if !self.submissionTypes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.submissionTypes, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_SubmitCourseAssignmentRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SubmitCourseAssignmentRequest"

  var submissionType: String = String()

  var courseID: Int64 = 0

  var assignmentID: Int64 = 0

  var studentToken: String = String()

  var body: String = String()

  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.submissionType)
      case 2: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.assignmentID)
      case 4: try decoder.decodeSingularStringField(value: &self.studentToken)
      case 5: try decoder.decodeSingularStringField(value: &self.body)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.submissionType.isEmpty {
      try visitor.visitSingularStringField(value: self.submissionType, fieldNumber: 1)
    }
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 2)
    }
    if self.assignmentID != 0 {
      try visitor.visitSingularInt64Field(value: self.assignmentID, fieldNumber: 3)
    }
    if !self.studentToken.isEmpty {
      try visitor.visitSingularStringField(value: self.studentToken, fieldNumber: 4)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_Assignment: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Assignment"

  var id: Int64 = 0

  var name: String = String()

  var published: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularBoolField(value: &self.published)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.published != false {
      try visitor.visitSingularBoolField(value: self.published, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Soseedy_CourseAssignmentSubmission: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CourseAssignmentSubmission"

  var id: Int64 = 0

  var body: String = String()

  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.body)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soseedy"

extension Soseedy_CreateAssignmentRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "withDescription"),
    3: .same(proto: "lockAt"),
    4: .same(proto: "unlockAt"),
    5: .same(proto: "dueAt"),
    6: .same(proto: "submissionTypes"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CreateAssignmentRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.withDescription != other.withDescription {return false}
    if self.lockAt != other.lockAt {return false}
    if self.unlockAt != other.unlockAt {return false}
    if self.dueAt != other.dueAt {return false}
    if self.submissionTypes != other.submissionTypes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_SubmitCourseAssignmentRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "submissionType"),
    2: .same(proto: "courseId"),
    3: .same(proto: "assignmentId"),
    4: .same(proto: "studentToken"),
    5: .same(proto: "body"),
    6: .same(proto: "url"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_SubmitCourseAssignmentRequest) -> Bool {
    if self.submissionType != other.submissionType {return false}
    if self.courseID != other.courseID {return false}
    if self.assignmentID != other.assignmentID {return false}
    if self.studentToken != other.studentToken {return false}
    if self.body != other.body {return false}
    if self.url != other.url {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_Assignment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "published"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_Assignment) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.published != other.published {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CourseAssignmentSubmission: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "body"),
    3: .same(proto: "url"),
  ]

  func _protobuf_generated_isEqualTo(other: Soseedy_CourseAssignmentSubmission) -> Bool {
    if self.id != other.id {return false}
    if self.body != other.body {return false}
    if self.url != other.url {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
