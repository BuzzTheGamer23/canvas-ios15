//
// Copyright (C) 2016-present Instructure, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import Foundation
import XCTest
import CanvasKeymaster
import EarlGrey
@testable import CanvasCore // for NativeLoginManager

class TeacherTestUtils {
  // All tokens are generated by SoSeedy at the same time.
  // Validating only the first token is sufficient.
  private static var tokenValidated:Bool = false

  static func validateToken(_ canvasUser:CanvasUser) {
    if (self.tokenValidated) { return }
    self.tokenValidated = true

    let baseURL = "https://\(canvasUser.domain)/"
    let authToken = canvasUser.token

    let url = NSURL(string: "\(baseURL)api/v1/users/self/profile")
    let request = NSMutableURLRequest(url: url! as URL)
    request.httpMethod = "GET"
    request.setValue("Bearer \(authToken)", forHTTPHeaderField: "Authorization")

    // response is nil on invalid headers. yay.
    // http://stackoverflow.com/a/19591949
    var response: URLResponse?
    // ignore deprecated warning, there's no real replacement.
    try! NSURLConnection.sendSynchronousRequest(request as URLRequest, returning: &response)

    let successful = ((response as? HTTPURLResponse)?.statusCode ?? -1) == 200

    if (!successful) {
      fatalError("Token validation failed.")
    }
  }

  static func getUserLoginInfo(_ canvasUser:CanvasUser) -> [String: Any] {
    validateToken(canvasUser)
    let user: [String: Any] = [
      "id":            canvasUser.id,
      "name":          canvasUser.name,
      "primary_email": canvasUser.loginId,
      "short_name":    canvasUser.shortName,
      "avatar_url":    canvasUser.avatarUrl
    ]

    let baseURL = "https://\(canvasUser.domain)/"
    let authToken = canvasUser.token
    let loginInfo: [String: Any] = [
      "authToken": authToken,
      "baseURL": baseURL,
      "user": user
    ]

    return loginInfo
  }
}

class TeacherTest: XCTestCase {

  override func setUp() {
    super.setUp()
    BuddyBuildSDK.startUITests()
    CanvasKeymaster.the().resetKeymasterForTesting()
    NativeLoginManager.shared().injectLoginInformation(nil)
    GREYTestHelper.enableFastAnimation()
    domainPickerPage.assertPageObjects()
  }

  override func tearDown() {
    BuddyBuildSDK.stopUITests()
    super.tearDown()
  }

  // logIn(self)
  @discardableResult
  func logIn<T>(_ testClass:T, _ testMethod:String = #function, _ file: StaticString = #file, _ line: UInt = #line) -> CanvasUser {
    let teacher = Data.getNextTeacher(testClass, testMethod)

    let loginInfo = TeacherTestUtils.getUserLoginInfo(teacher)
    NativeLoginManager.shared().injectLoginInformation(loginInfo)
    coursesListPage.assertPageObjects()
    
    return teacher
  }

  /*

   This logIn method is useful for running a test in a loop.

   func testSomething {
     let course = Data.getNextCourse(self)
     let teacher = Data.getNextTeacher(self)

     for _ in 1...1000 {
       setUp()
       logIn(teacher)
       // test code
       tearDown()
     }
   }
  */
  // logIn(teacher)
  @discardableResult
  func logIn(_ teacher:CanvasUser, _ file: StaticString = #file, _ line: UInt = #line) -> CanvasUser {
    let loginInfo = TeacherTestUtils.getUserLoginInfo(teacher)
    NativeLoginManager.shared().injectLoginInformation(loginInfo)
    coursesListPage.assertPageObjects()

    return teacher
  }
}
