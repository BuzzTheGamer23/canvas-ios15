=begin
Copyright (C) 2016 - present Instructure, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
=end

fastlane_version '1.89.0'

# noinspection RubyLiteralArrayInspection
fast_execute = [
  'test_parent',
  'build_earlgrey_parent',
  'test_earlgrey_parent'
].include? ARGV.first

update_fastlane unless fast_execute

default_platform :ios
require 'slather'
require 'scan'
require_relative 'xcode_8_xctestrun'
Xcode8.runner = self.runner

XC_WORKSPACE='AllTheThings.xcworkspace'

PARENT_APP_ID='com.instructure.parentapp'
PARENT_SCHEME='Parent'
PARENT_PROJECT='Parent/Parent.xcodeproj'

TEACHER_APP_ID='com.instructure.teacher'
TEACHER_SCHEME='Teach'
TEACHER_PROJECT='Teacher/Teach.xcodeproj'

CANVAS_APP_ID='com.instructure.icanvas'
CANVAS_SCHEME='Canvas'
CANVAS_PROJECT='Canvas/Canvas.xcodeproj'

FRAMEWORKS_SCHEME='EverythingBagel'
FRAMEWORKS_PROJECT='Frameworks/EverythingBagel/EverythingBagel.xcodeproj'

def retry_cmd cmd_name, limit = 3, &block
  # if execution fails then we retry up to limit - 1 times.
  tries = limit
  begin
    block.call
  rescue
    unless (tries -= 1).zero?
      puts "Retry ##{limit - tries}: #{cmd_name}"
      retry
    end
    raise
  end
end

platform :ios do
  before_all do
      unless fast_execute
        retry_cmd('carthage', 10)  { carthage(no_build: true, use_binaries: false, use_ssh: true) }
        retry_cmd('cocoapods', 10) { cocoapods }
      end
  end

  def update_build_number(xc_project)
    if ENV['BITRISE_BUILD_NUMBER']
      increment_build_number(
        build_number: ENV['BITRISE_BUILD_NUMBER'],
        xcodeproj: xc_project
      )
    end
  end

  def test(xc_scheme, xc_project, coverage=true)
    device = 'iPhone 6'

    retry_cmd('scan') do
      scan(
        scheme: xc_scheme,
        device: device,
        # Specify destination directly to ensure Bitrise uses latest iOS Simulator
        destination: "platform=iOS Simulator,name=#{device},OS=latest",
        workspace: XC_WORKSPACE,
        skip_build: true,
        output_directory: './artifacts',
        skip_slack: true,
      )
    end

    if coverage
      slather(
        proj: xc_project,
        workspace: XC_WORKSPACE,
        scheme: xc_scheme,
        output_directory: './artifacts'
      )
    end
  end

  def distribute_adhoc
    hockey(
      api_token: ENV['HOCKEY_API_KEY'],
      notes: 'Sending the canary down the coalmine'
    )
  end

  def build_for_device(xc_scheme)
    retry_cmd('gym') do
      # Always clear derived data before building becaue Xcode is flaky.
      # Fix 'module 'Masonry' not found'
      clear_derived_data
      gym(
        scheme: xc_scheme,
        workspace: XC_WORKSPACE,
        clean: false,
        output_directory: './artifacts',
        export_team_id: 'B6333T4PXQ',
        use_legacy_build_api: true, # required or Xcode will flake out.
        toolchain: :swift_2_3
      )
    end
  end

  def pull(app_id, xc_project, xc_scheme)
    update_build_number(xc_project)
    match(type: 'adhoc', app_identifier: app_id)

    build_for_device(xc_scheme)

    test(xc_scheme, xc_project)

    distribute_adhoc
  end

  def beta(app_id, xc_project, xc_scheme)
    match(type: 'adhoc', app_identifier: app_id) # gym uses adhoc profile for initial signing

    build_for_device(xc_scheme)

    # temporarily disable testing for the sake of time
    #test(xc_scheme, xc_project)

    match(type: 'appstore', app_identifier: app_id)
    pilot(
      app_identifier: app_id,
      ipa: "./artifacts/#{xc_scheme}.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
  end

  ############
  # Frameworks

  desc 'build frameworks for pull request'
  lane :pull_frameworks do
    test(FRAMEWORKS_SCHEME, FRAMEWORKS_PROJECT)
  end

  ############
  # Canvas

  desc 'build canvas for pull request'
  lane :pull_canvas do
    pull(CANVAS_APP_ID, CANVAS_PROJECT, CANVAS_SCHEME)
  end

  desc 'build Canvas.app and submit to iTunes Connect'
  lane :beta_canvas do
    beta(CANVAS_APP_ID, CANVAS_PROJECT, CANVAS_SCHEME)
  end

  ############
  # Teacher

  lane :pull_teacher do
    pull(TEACHER_APP_ID, TEACHER_PROJECT, TEACHER_SCHEME)
  end

  desc 'build Teacher.app and submit to iTunes Connect'
  lane :beta_teacher do
    beta(TEACHER_APP_ID, TEACHER_PROJECT, TEACHER_SCHEME)
  end

  ############
  # Parent

  desc 'build parent for pull request'
  lane :pull_parent do
    pull(PARENT_APP_ID, PARENT_PROJECT, PARENT_SCHEME)
  end

  desc 'build Parent.app and submit to iTunes Connect'
  lane :beta_parent do
    beta(PARENT_APP_ID, PARENT_PROJECT, PARENT_SCHEME)
  end

  desc 'Test Parent.app'
  lane :test_parent do
    test(PARENT_SCHEME, PARENT_PROJECT, coverage=false)
  end

  ############
  # Generic

  desc 'Update carthage and cocoapods dependencies'
  lane :deps do
  end

  desc 'Parent.app EarlGrey build-for-testing'
  lane :build_earlgrey_parent do
    Xcode8.build_for_testing(scheme: 'ParentEarlGreyTests')
  end

  desc 'Parent.app EarlGrey test-without-building'
  lane :test_earlgrey_parent do
    Xcode8.test_without_building(scheme: 'ParentEarlGreyTests')
  end
end
