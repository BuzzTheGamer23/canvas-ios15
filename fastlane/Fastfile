# Copyright (C) 2016 - present Instructure, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

fastlane_version '2.25.0' rescue update_fastlane

require_relative 'utils/utils'
require_relative 'fastlane_utils'
require_relative 'bluepill'

default_platform :ios
fastlane_require 'scan'
require_relative 'xcode_8_xctestrun'
require_relative 'fbsimctl'
Xcode8.runner = self.runner

XC_WORKSPACE = 'AllTheThings.xcworkspace'

PARENT_APP_ID  = 'com.instructure.parentapp'
PARENT_SCHEME  = 'Parent'
PARENT_PROJECT = 'Parent/Parent.xcodeproj'

TEACHER_APP_ID  = 'com.instructure.teacher'
TEACHER_SCHEME  = 'Teach'
TEACHER_PROJECT = 'Teacher/Teach.xcodeproj'

TEACHER_RN_WORKSPACE = 'rn/Teacher/ios/Teacher.xcworkspace'

CANVAS_APP_ID  = 'com.instructure.icanvas'
CANVAS_SCHEME  = 'Canvas'
CANVAS_PROJECT = 'Canvas/Canvas.xcodeproj'

FRAMEWORKS_SCHEME  = 'EverythingBagel'
FRAMEWORKS_PROJECT = 'Frameworks/EverythingBagel/EverythingBagel.xcodeproj'

platform :ios do
  def install_native_deps
    retry_cmd('carthage', 10) { _execute(command: 'carthage checkout --no-use-binaries') }
    retry_cmd('cocoapods', 10) { cocoapods }

    rn_teacher = join(__dir__, '../rn/Teacher')
    retry_cmd('yarn', 10) { _execute(dir: rn_teacher, command: 'yarn') }
  end

  def update_build_number(xc_project)
    if ENV['BITRISE_BUILD_NUMBER']
      increment_build_number(
          build_number: ENV['BITRISE_BUILD_NUMBER'],
          xcodeproj:    xc_project
      )
    end
  end

  def test(xc_scheme, xc_project, coverage=true)
    retry_cmd('scan') do
      scan(
          scheme:           xc_scheme,
          device:           TEST_SIMULATOR.udid,
          workspace:        XC_WORKSPACE,
          skip_build:       true,
          output_directory: './artifacts',
          skip_slack:       true,
      )
    end

    if coverage
      # slather(
      #     proj:             xc_project,
      #     workspace:        XC_WORKSPACE,
      #     scheme:           xc_scheme,
      #     output_directory: './artifacts'
      # )
    end
  end

  def distribute_adhoc
    hockey(
        api_token: ENV['HOCKEY_API_KEY'],
        notes:     'Sending the canary down the coalmine'
    )
  end

  def build_for_device(xc_scheme, export_method)
    retry_cmd('gym') do
      # Always clear derived data before building becaue Xcode is flaky.
      # Fix 'module 'Masonry' not found'
      clear_derived_data
      gym(
          scheme:               xc_scheme,
          workspace:            XC_WORKSPACE,
          clean:                false,
          output_directory:     './artifacts',
          export_team_id:       'B6333T4PXQ',
          use_legacy_build_api: true, # required or Xcode will flake out.
          toolchain:            :swift_2_3,
          export_method:        export_method
      )
    end
  end

  def pull(app_id, xc_project, xc_scheme)
    update_build_number(xc_project)
    match(type: 'adhoc', app_identifier: app_id)

    build_for_device(xc_scheme, 'ad-hoc')

    test(xc_scheme, xc_project)

    distribute_adhoc
  end

  def beta(app_id, xc_project, xc_scheme)
    update_build_number(xc_project)
    match(type: 'adhoc', app_identifier: app_id) # gym uses adhoc profile for initial signing

    build_for_device(xc_scheme, 'app-store')

    # temporarily disable testing for the sake of time
    #test(xc_scheme, xc_project)

    match(type: 'appstore', app_identifier: app_id)
    pilot(
        app_identifier:                    app_id,
        ipa:                               "./artifacts/#{xc_scheme}.ipa",
        skip_submission:                   true,
        skip_waiting_for_build_processing: true
    )
  end

  ############
  # Frameworks

  desc 'build frameworks for pull request'
  lane :pull_frameworks do
    test(FRAMEWORKS_SCHEME, FRAMEWORKS_PROJECT)
  end

  ############
  # Canvas

  desc 'build canvas for pull request'
  lane :pull_canvas do
    pull(CANVAS_APP_ID, CANVAS_PROJECT, CANVAS_SCHEME)
  end

  desc 'build Canvas.app and submit to iTunes Connect'
  lane :beta_canvas do
    beta(CANVAS_APP_ID, CANVAS_PROJECT, CANVAS_SCHEME)
  end

  ############
  # Teacher

  lane :pull_teacher do
    pull(TEACHER_APP_ID, TEACHER_PROJECT, TEACHER_SCHEME)
  end

  desc 'build Teacher.app and submit to iTunes Connect'
  lane :beta_teacher do
    beta(TEACHER_APP_ID, TEACHER_PROJECT, TEACHER_SCHEME)
  end

  ############
  # Parent

  desc 'build parent for pull request'
  lane :pull_parent do
    pull(PARENT_APP_ID, PARENT_PROJECT, PARENT_SCHEME)
  end

  desc 'build Parent.app and submit to iTunes Connect'
  lane :beta_parent do
    beta(PARENT_APP_ID, PARENT_PROJECT, PARENT_SCHEME)
  end

  desc 'Test Parent.app'
  lane :test_parent do
    test(PARENT_SCHEME, PARENT_PROJECT, coverage=false)
  end

  ############
  # Generic

  desc 'Update carthage and cocoapods dependencies'
  lane :deps do
    install_native_deps
  end

  desc 'Parent.app EarlGrey build-for-testing'
  lane :build_earlgrey_parent do
    Xcode8.build_for_testing(scheme: 'ParentEarlGreyTests')
  end

  desc %q(Parent.app EarlGrey test-without-building.
Requires fbsimctl

brew tap facebook/fb
brew install fbsimctl --HEAD)
  lane :test_earlgrey_parent do
    video_out = File.expand_path(File.join(__dir__, '..', 'video.mp4'))
    simulator = FBSimctl.new video_out: video_out

    begin
      simulator.start_server
      simulator.start_recording

      Xcode8.test_without_building(scheme: 'ParentEarlGreyTests')

      simulator.stop_recording
    ensure
      simulator.stop_server
    end
  end

  desc 'Seed data into Canvas LMS for testing.'
  lane :seed_teacher do |options|
    SoSeedy.seed(app: :teacher)
  end

  # fastlane test_earlgrey_teacher run:10
  desc 'Test teacher app with Earl Grey,'
  lane :test_earlgrey_teacher do |options|
    Xcode8.build_for_testing(scheme: 'Teacher', workspace: TEACHER_RN_WORKSPACE)

    run = options.fetch(:run, '1').to_i
    puts "Runnings Teacher Earl Grey Tests #{run} times."
    1.upto(run) do |count|
      SoSeedy.seed(options.merge(app: :teacher))
      Xcode8.test_without_building(scheme: 'TeacherUITests', workspace: TEACHER_RN_WORKSPACE)
    end
  end

  desc 'Test teacher app with Earl Grey,'
  lane :bluepill_teacher do |options|
    Bluepill.new(app_scheme:  'Teacher',
                 test_scheme: 'TeacherUITests',
                 workspace:   TEACHER_RN_WORKSPACE).run
  end
end # platform :ios
